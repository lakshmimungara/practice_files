Day-49 session-49(24/10/2024)
-----------------------------
kubernetes is a master node architecture 
manifest files are used to run the image 
kubectl 
eksctl 

-> we have discussed about namespaces - isolated process where you created resources, pods - smallest deployable unit inside kubernetes and one pod can contain the multiple containers and all pods inside container can share the network identity and storage 
-> multi-container 


Now in today's class
--------------------
04-labels.yaml

-> labels are mandatory in kubernetes
-> it's like a key-value pair 

kind: Pod 
apiVersion: v1 
metadata:
	name: labels 
	labels:
	  project:expense
	  module: backend 
	  environment: dev 
spec:
	containers:
	- name: nginx 
	  image: nginx

-> labels add the pod related metadata key-value pair
-> labels are used for selectors 

-> Before this we have create EKC cluster 
-> eksctl create cluster --config-file=eks.yaml

kubectl apply -f 04-labels.yaml 
kubectl get pods 
kubectl describe pod labels

kubectl describe pod <pod-name> -> we will get the full information 

-> annotations are exactly like labels but usage is different and they are key-value pairs but external selectors
-> labels has some limits and annotations include special characters also. so we can include large values in annotations 
-> we can use annotations instead of labels 
-> labels are used for kubernetes internal resource selectors 
-> annotations are used for kubernetes external resource selectors 

05-annotations.yaml

kind: Pod 
apiVersion: v1 
metadata:
	name: annotations
	annotations:
	  imageregistry: "https://hub.docker.com"
	  buildURL: "https://jenkins:joindevops.com/expense/backend/build/67"
spec:
	containers:
	- name: nginx 
	  image: nginx
	  
	  
kubectl apply -f 05-annotations.yaml
kubectl get pods 
kubectl describe pod annotations

Environment variables for a containers 

ENV in image definition vs ENV in manifest 
-----------------------------------
-> env in Dockerfile should rebuild if you change anything 
-> env in manifest no need to rebuild, just restart is enough 
-> One of the advantage to keep the env in manifest is to restart whenever it changes 
-> env in kubernetes is a list of key-value pairs

-> 06-env.yaml 

kind: Pod 
apiVersion: v1 
metadata:
	name: environment
spec:
	containers:
	- name: nginx 
	  image: nginx
	  env:
	    - name: course 
		  value: devops 
		- name: trainer
		  value: "shivakumar" 
		- name: duration 
		  value: "2hrs" 
	
kubectl apply -f 06-env.yaml 
kubectl get pods 
kubectl exec -it environment -- bash 
env 

-> And these variables can be accessed in the code 


Resource utilization 
---------------------
-> Docker advantage in resource utilization --> It will consume the resource dynamically and it will not block the resource
-> In virtualization, underline host will block the resources 

Disadvantage
-------------
-> If something goes wrong in loop, it will occupy entire host resources 
-> we need to allocate the resources to the container 

-> we have two things here 
1 CPU = 1000m cpu 
1. softlimit --> 100m CPU, 68MB RAM 
2. hardlimit --> 120m CPU, 128 MB RAM

Requests and limits  --> important for interviews
---------------------
If the node where a pod is running has enough of a resource available, it's possible(and allowed) for a container to use more resource than its request for that resource specifies. However, a container is not allowed to use more than its resource limit 

-> This can be useful in monitoring as well 

07-resource-limit.yaml 

kind: Pod 
apiVersion: v1 
metadata:
	name: limits
spec:
	containers:
	- name: nginx 
	  image: nginx 
	  resources:
	    requests:
		  cpu: 100m 
		  memory: 68Mi 
		limits: 
		  cpu: 120m
		  memory: 100Mi
		

kubectl apply -f 07-resource-limit.yaml 
kubectl get pods 
kubectl describe pod limits

Important for interviews 
-------------------------
If they asked to write for Pod 
we have to include, 
1. labels 
2. annotations
3. env variables
4. resource limits 

-> Our goal is, without touching the actual code, we need to change the value --> variables 

ConfigMaps:
------------
-> It will supply the configuration values for our applications 

08-config-map.yaml 

apiVersion: v1 
kind: ConfigMap
metadata: 
	name: nginx-config 
data: 
	course: devops 
	duration: "120hrs"
	

kubectl apply -f 08-config-map.yaml 
kubectl get configmaps
kubectl describe configmap nginx-config 

S, how to refere this config-map files?

09-pod-config.yaml 

kind: Pod 
apiVersion: v1 
metadata:
	name: pod-config
spec:
	containers:
	- name: nginx 
	  image: nginx
	  env:
	    - name: course 
		  valueFrom: 
			configMapKeyRef: 
			  name: nginx-config # name of the config map you are referring to 
			  key: course   # env.name and config map key name can be different or same there is no difference
		- name: duration
		  valueFrom:  
			configMapKeyRef: 
			  name: nginx-config
			  key: duration

kubectl apply -f 09-pod-config.yaml 
kubectl get pods 
kubectl exec -it pod-config -- bash 
env
kubectl get configmap
kubectl edit configmap nginx-config (you can change values in the editor) -> here we have changed values so do restart
kubectl get pods 
kubectl delete pod pod-config
kubectl apply -f 09-pod-config.yaml 
kubectl exec -it pod-config -- bash
env

--> It is difficult to manage the large file when env variables get increases


kind: Pod 
apiVersion: v1 
metadata:
	name: pod-config
spec:
	containers:
	- name: nginx 
	  image: nginx
	  envFrom:
	  - configMapRef:
		 name: nginx-config
		 
kubectl delete pod pod-config
kubectl apply -f 09-pod-config.yaml 
kubectl get pods 
	
config files are non confidential information	
secrets --> confidential information 

we have to encode the data and keep it in a file 

encoding 
--------
echo "lakshmi" | base64 
echo "admin123" | base64

10-secret.yaml 

apiVersion: v1 
kind: Secret 
metadata: 
	name: pod-secret 
type: Opaque
data: 
	username: eudUIFFHedkna
	password: duACBSKJ
	

kubectl apply -f 10-secret.yaml
kubectl get secrets
kubectl describe secret pod-secret

11-pod-secret.yaml

kind: Pod 
apiVersion: v1 
metadata:
	name: pod-secret 
spec:
	containers:
	- name: nginx 
	  image: nginx
	  envFrom:
	  - secretRef:
		  name: pod-secret
		
		 
kubectl apply -f 11-pod-secret.yaml		 
kubectl get pods 
kubectl exec -it pod-secret -- bash 


decoding 
--------
echo "uswduiaSCJKZJK" | base64 --decode 
-> encryption is different and we use secret manager or ssm parameters in AWS 

How can you access your pod in interent or outside? 
A) By exposing to services 

-> services is another type of resources 

kubectl get pods 
kubectl describe pod pod-secret --> copy the Ip address from here 
kubectl exec -it annotations -- bash 
curl <ip address>

-> pod IP are ephemeral --> any time it can change 
-> It is not good to access the pod to pod with Ip address
-> we can use servies to communication between pods 
-> Through services pod to pod comminucation 

Kubernetes services 
--------------------
-> A service is a method for exposing a network application that is running as one or more Pods in your cluster 
-> we have three services 
1. cluster IP --> It is default. only for internal pod to pod communication
2. node port -> open a port on node/host 
-> You can expose the port to the external world like internet 
-> when you create a nodeport service a port is opened on each workernode and it will be forwarded to the Pod
3. load balancer

-> we have to attach the pod to service 

services select pods using labels 
------------------------------------
selector: 
	app.kubernetes.io/name: proxy 

		
labels:
--------
Is single label enough? yes, it is unique
				
12-service.yaml 

apiVersion: v1 
kind: Service 
metadata:
	name: nginx 
spec: 
	selector: 
		project: expense 
		module: backend 
		environment: dev 
	ports: 
	- name: nginx-svc-port
	  protocol: TCP 
	  port: 80 # service port 
	  targetPort: 80 # container port 
	  
--> annotations pod will hit the kubernetes service and service hit the labales -> it is just like a load balancer functionality 
-> DNS to pod and load balancer as well 
	  
kubectl apply -f 12-service.yaml
kubectl get services 
kubectl exec -it annotations -- bash 
curl nginx
kubectl describe service nginx (here we will get the Endpoint that is pod Ip address)

-> By this, pod can be accessed by any no.of times and we can create and delete it 


13-node-port.yaml 

apiVersion: v1 
kind: Service 
metadata:
	name: nginx-np
spec: 
	type: NodePort
	selector: 
		project: expense 
		module: backend 
		environment: dev 
	ports: 
	- name: nginx-svc-port
	  protocol: TCP 
	  port: 80 # service port 
	  targetPort: 80 # container port 
	  
-> one port number is open for workernode i.e 32477
-> any user can access this host ip:port number and it takes that port number to Pod 

kubectl apply -f 13-node-port.yaml
kubectl get services 
kubectl get pods -o wide 

-> check for the labels IP address and compare with the instance and give the security group -> Allow all traffic and all Ip 0.0.0.0/0 
-> access with that IP address in chrome --> Ipaddress:32477
-> And also try with the other instances IP addresses 

-> User can hit any node ip address and request will be forwarded to Pod 

-> Cluster Ip is a subset of NodePort 

14-load-balancer.yaml 

apiVersion: v1 
kind: Service 
metadata:
	name: nginx-lb
spec: 
	type: LoadBalancer
	selector: 
		project: expense 
		module: backend 
		environment: dev 
	ports: 
	- name: nginx-svc-port
	  protocol: TCP 
	  port: 80 # service port 
	  targetPort: 80 # container port 
	  
kubectl apply -f 14-load-balancer.yaml
kubectl get services 

-> load balancer opened the port number 31857
-> we should hit with the DNS and we will get the response -> it will take some time to load. so please wait for 3 to 4mins 


-> user hits the load balancer and the request goes to any workernode in random which depends on health and free 
-> It will call 31857 and ultimately it goes to Pod, and before pod it goes to cluster Ip 

-> Cluster Ip is a subset of NodePort 
-> NodePort is a subset of LoadBalancer

eks node port range - 30000-32676 -> it will open the port very randomly 
